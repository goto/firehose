"use strict";(self.webpackChunkfirehose=self.webpackChunkfirehose||[]).push([[605],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(n),p=o,d=f["".concat(c,".").concat(p)]||f[p]||m[p]||a;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6044:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return m}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={},c="Firehose Consumer",l={unversionedId:"concepts/consumer",id:"concepts/consumer",title:"Firehose Consumer",description:"There are two type of consumer that can be configured.",source:"@site/docs/concepts/consumer.md",sourceDirName:"concepts",slug:"/concepts/consumer",permalink:"/firehose/concepts/consumer",draft:!1,editUrl:"https://github.com/goto/firehose/edit/master/docs/docs/concepts/consumer.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Templating",permalink:"/firehose/concepts/templating"},next:{title:"Decorators",permalink:"/firehose/concepts/decorators"}},u={},m=[{value:"FirehoseSyncConsumer",id:"firehosesyncconsumer",level:2},{value:"FirehoseAsyncConsumer",id:"firehoseasyncconsumer",level:2}],f={toc:m};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"firehose-consumer"},"Firehose Consumer"),(0,a.kt)("p",null,"There are two type of consumer that can be configured.\n",(0,a.kt)("inlineCode",{parentName:"p"},"SOURCE_KAFKA_CONSUMER_MODE")," can be set as ",(0,a.kt)("inlineCode",{parentName:"p"},"SYNC")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"ASYNC"),".\nSyncConsumer run in one thread on the other hand AsyncConsumer\nhas a SinkPool. SinkPool can be configured by setting ",(0,a.kt)("inlineCode",{parentName:"p"},"SINK_POOL_NUM_THREADS"),"."),(0,a.kt)("h2",{id:"firehosesyncconsumer"},"FirehoseSyncConsumer"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pull messages from kafka in batches."),(0,a.kt)("li",{parentName:"ul"},"Apply filter based on filter configuration"),(0,a.kt)("li",{parentName:"ul"},"Add offsets of Not filtered messages into OffsetManager and set them committable."),(0,a.kt)("li",{parentName:"ul"},"call sink.pushMessages() with filtered messages."),(0,a.kt)("li",{parentName:"ul"},"Add offsets for remaining messages and set them committable."),(0,a.kt)("li",{parentName:"ul"},"Call consumer.commit()"),(0,a.kt)("li",{parentName:"ul"},"Repeat.")),(0,a.kt)("h2",{id:"firehoseasyncconsumer"},"FirehoseAsyncConsumer"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pull messages from kafka in batches."),(0,a.kt)("li",{parentName:"ul"},"Apply filter based on filter configuration"),(0,a.kt)("li",{parentName:"ul"},"Add offsets of Not filtered messages into OffsetManager and set them committable."),(0,a.kt)("li",{parentName:"ul"},"Schedule a task on SinkPool for these messages."),(0,a.kt)("li",{parentName:"ul"},"Add offsets of these messages with key as the returned ",(0,a.kt)("inlineCode",{parentName:"li"},"Future"),","),(0,a.kt)("li",{parentName:"ul"},"Check SinkPool for finished tasks."),(0,a.kt)("li",{parentName:"ul"},"Set offsets to be committable for any finished future. "),(0,a.kt)("li",{parentName:"ul"},"Call consumer.commit()"),(0,a.kt)("li",{parentName:"ul"},"Repeat.")))}p.isMDXComponent=!0}}]);