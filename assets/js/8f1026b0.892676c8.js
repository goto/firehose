"use strict";(self.webpackChunkfirehose=self.webpackChunkfirehose||[]).push([[569],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return _}});var i=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=u(t),_=l,N=m["".concat(s,".").concat(_)]||m[_]||d[_]||o;return t?i.createElement(N,a(a({ref:n},p),{},{components:t})):i.createElement(N,a({ref:n},p))}));function _(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,a=new Array(o);a[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:l,a[1]=r;for(var u=2;u<o;u++)a[u]=t[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1384:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return _},frontMatter:function(){return r},metadata:function(){return u},toc:function(){return d}});var i=t(7462),l=t(3366),o=(t(7294),t(3905)),a=["components"],r={},s="MongoDB",u={unversionedId:"sinks/mongo-sink",id:"sinks/mongo-sink",title:"MongoDB",description:"A MongoDB sink Firehose \\(SINK_TYPE= mongodb \\) requires the following variables to be set along with Generic ones",source:"@site/docs/sinks/mongo-sink.md",sourceDirName:"sinks",slug:"/sinks/mongo-sink",permalink:"/firehose/sinks/mongo-sink",draft:!1,editUrl:"https://github.com/goto/firehose/edit/master/docs/docs/sinks/mongo-sink.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Prometheus",permalink:"/firehose/sinks/prometheus-sink"},next:{title:"Redis Sink",permalink:"/firehose/sinks/redis-sink"}},p={},d=[{value:"<code>SINK_MONGO_CONNECTION_URLS</code>",id:"sink_mongo_connection_urls",level:3},{value:"<code>SINK_MONGO_DB_NAME</code>",id:"sink_mongo_db_name",level:3},{value:"<code>SINK_MONGO_AUTH_ENABLE</code>",id:"sink_mongo_auth_enable",level:3},{value:"<code>SINK_MONGO_AUTH_USERNAME</code>",id:"sink_mongo_auth_username",level:3},{value:"<code>SINK_MONGO_AUTH_PASSWORD</code>",id:"sink_mongo_auth_password",level:3},{value:"<code>SINK_MONGO_AUTH_DB</code>",id:"sink_mongo_auth_db",level:3},{value:"<code>SINK_MONGO_COLLECTION_NAME</code>",id:"sink_mongo_collection_name",level:3},{value:"<code>SINK_MONGO_PRIMARY_KEY</code>",id:"sink_mongo_primary_key",level:3},{value:"<code>SINK_MONGO_MODE_UPDATE_ONLY_ENABLE</code>",id:"sink_mongo_mode_update_only_enable",level:3},{value:"<code>SINK_MONGO_INPUT_MESSAGE_TYPE</code>",id:"sink_mongo_input_message_type",level:3},{value:"<code>SINK_MONGO_CONNECT_TIMEOUT_MS</code>",id:"sink_mongo_connect_timeout_ms",level:3},{value:"<code>SINK_MONGO_RETRY_STATUS_CODE_BLACKLIST</code>",id:"sink_mongo_retry_status_code_blacklist",level:3},{value:"<code>SINK_MONGO_PRESERVE_PROTO_FIELD_NAMES_ENABLE</code>",id:"sink_mongo_preserve_proto_field_names_enable",level:3},{value:"<code>SINK_MONGO_SERVER_SELECT_TIMEOUT_MS</code>",id:"sink_mongo_server_select_timeout_ms",level:3}],m={toc:d};function _(e){var n=e.components,t=(0,l.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mongodb"},"MongoDB"),(0,o.kt)("p",null,"A MongoDB sink Firehose ","(",(0,o.kt)("inlineCode",{parentName:"p"},"SINK_TYPE"),"= ",(0,o.kt)("inlineCode",{parentName:"p"},"mongodb")," ",")"," requires the following variables to be set along with Generic ones"),(0,o.kt)("h3",{id:"sink_mongo_connection_urls"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_CONNECTION_URLS")),(0,o.kt)("p",null,"MongoDB connection URL/URLs to connect. Multiple URLs could be given in a comma separated format."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"localhost:27017")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"required"))),(0,o.kt)("h3",{id:"sink_mongo_db_name"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_DB_NAME")),(0,o.kt)("p",null,"The name of the Mongo database to which you want to write the documents. If it does not exist, it will be created."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"sample_DB")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"required"))),(0,o.kt)("h3",{id:"sink_mongo_auth_enable"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_AUTH_ENABLE")),(0,o.kt)("p",null,"This field should be set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if login authentication is enabled for the MongoDB Server."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"true")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"optional")),(0,o.kt)("li",{parentName:"ul"},"Default value: ",(0,o.kt)("inlineCode",{parentName:"li"},"false"))),(0,o.kt)("h3",{id:"sink_mongo_auth_username"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_AUTH_USERNAME")),(0,o.kt)("p",null,"The login username for session authentication to the MongoDB Server. This is a required field is ",(0,o.kt)("inlineCode",{parentName:"p"},"SINK_MONGO_AUTH_ENABLE")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"bruce_wills")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"optional"))),(0,o.kt)("h3",{id:"sink_mongo_auth_password"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_AUTH_PASSWORD")),(0,o.kt)("p",null,"The login password for session authentication to the MongoDB Server. This is a required field is ",(0,o.kt)("inlineCode",{parentName:"p"},"SINK_MONGO_AUTH_ENABLE")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"password@123")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"optional"))),(0,o.kt)("h3",{id:"sink_mongo_auth_db"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_AUTH_DB")),(0,o.kt)("p",null,"The name of the Mongo authentication database in which the user credentials are stored. This is a required field is ",(0,o.kt)("inlineCode",{parentName:"p"},"SINK_MONGO_AUTH_ENABLE")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"sample_auth_DB")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"optional"))),(0,o.kt)("h3",{id:"sink_mongo_collection_name"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_COLLECTION_NAME")),(0,o.kt)("p",null,"Defines the name of the Mongo Collection"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"customerCollection")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"required"))),(0,o.kt)("h3",{id:"sink_mongo_primary_key"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_PRIMARY_KEY")),(0,o.kt)("p",null,"The identifier field of the document in MongoDB. This should be the key of a field present in the message ","(","JSON or Protobuf",")"," and it has to be a unique, non-null field. So the value of this field in the message will be copied to the ",(0,o.kt)("inlineCode",{parentName:"p"},"_id")," field of the document in MongoDB while writing the document."),(0,o.kt)("p",null,"Note - If this parameter is not specified in Upsert mode ","("," i.e. when the variable",(0,o.kt)("inlineCode",{parentName:"p"},"SINK_MONGO_MODE_UPDATE_ONLY_ENABLE=false"),")",", then Mongo server will assign the default UUID to the ",(0,o.kt)("inlineCode",{parentName:"p"},"_id")," field, and only insert operations can be performed."),(0,o.kt)("p",null,"Note - this variable is a required field in the case of Update-Only mode ","("," i.e. when the variable",(0,o.kt)("inlineCode",{parentName:"p"},"SINK_MONGO_MODE_UPDATE_ONLY_ENABLE=true"),")",". Also, all externally-fed documents must have this key copied to the ",(0,o.kt)("inlineCode",{parentName:"p"},"_id")," field, for update operations to execute normally."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"customer_id")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"optional"))),(0,o.kt)("h3",{id:"sink_mongo_mode_update_only_enable"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_MODE_UPDATE_ONLY_ENABLE")),(0,o.kt)("p",null,"MongoDB sink can be created in 2 modes: ",(0,o.kt)("inlineCode",{parentName:"p"},"Upsert mode")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"UpdateOnly mode"),". If this config is set:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"TRUE"),": Firehose will run on UpdateOnly mode which will only UPDATE the already existing documents in the MongoDB collection."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"FALSE"),": Firehose will run on Upsert mode, UPDATING the existing documents and also INSERTING any new ones.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"TRUE")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"required")),(0,o.kt)("li",{parentName:"ul"},"Default value: ",(0,o.kt)("inlineCode",{parentName:"li"},"FALSE"))))),(0,o.kt)("h3",{id:"sink_mongo_input_message_type"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_INPUT_MESSAGE_TYPE")),(0,o.kt)("p",null,"Indicates if the Kafka topic contains JSON or Protocol Buffer messages."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"PROTOBUF")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"required")),(0,o.kt)("li",{parentName:"ul"},"Default value: ",(0,o.kt)("inlineCode",{parentName:"li"},"JSON"))),(0,o.kt)("h3",{id:"sink_mongo_connect_timeout_ms"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_CONNECT_TIMEOUT_MS")),(0,o.kt)("p",null,"Defines the connect timeout of the MongoDB endpoint. The value specified is in milliseconds."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"60000")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"required")),(0,o.kt)("li",{parentName:"ul"},"Default value: ",(0,o.kt)("inlineCode",{parentName:"li"},"60000"))),(0,o.kt)("h3",{id:"sink_mongo_retry_status_code_blacklist"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_RETRY_STATUS_CODE_BLACKLIST")),(0,o.kt)("p",null,"List of comma-separated status codes for which Firehose should not retry in case of UPDATE ONLY mode is TRUE"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"16608,11000")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"optional"))),(0,o.kt)("h3",{id:"sink_mongo_preserve_proto_field_names_enable"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_PRESERVE_PROTO_FIELD_NAMES_ENABLE")),(0,o.kt)("p",null,"Whether or not the protobuf field names should be preserved in the MongoDB document. If false the fields will be converted to camel case."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"false")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"optional")),(0,o.kt)("li",{parentName:"ul"},"Default: ",(0,o.kt)("inlineCode",{parentName:"li"},"true"))),(0,o.kt)("h3",{id:"sink_mongo_server_select_timeout_ms"},(0,o.kt)("inlineCode",{parentName:"h3"},"SINK_MONGO_SERVER_SELECT_TIMEOUT_MS")),(0,o.kt)("p",null,"Sets the server selection timeout in milliseconds, which defines how long the driver will wait for server selection to succeed before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example value: ",(0,o.kt)("inlineCode",{parentName:"li"},"4000")),(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"optional")),(0,o.kt)("li",{parentName:"ul"},"Default: ",(0,o.kt)("inlineCode",{parentName:"li"},"30000"))))}_.isMDXComponent=!0}}]);