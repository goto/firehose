"use strict";(self.webpackChunkfirehose=self.webpackChunkfirehose||[]).push([[412],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),u=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return i.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},_=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),_=u(n),d=r,c=_["".concat(p,".").concat(d)]||_[d]||m[d]||l;return n?i.createElement(c,a(a({ref:t},s),{},{components:n})):i.createElement(c,a({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=_;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var u=2;u<l;u++)a[u]=n[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}_.displayName="MDXCreateElement"},6841:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return m}});var i=n(7462),r=n(3366),l=(n(7294),n(3905)),a=["components"],o={},p="Prometheus",u={unversionedId:"sinks/prometheus-sink",id:"sinks/prometheus-sink",title:"Prometheus",description:"A Prometheus sink Firehose \\(SINK_TYPE=prometheus\\) requires the following variables to be set along with Generic ones.",source:"@site/docs/sinks/prometheus-sink.md",sourceDirName:"sinks",slug:"/sinks/prometheus-sink",permalink:"/firehose/sinks/prometheus-sink",draft:!1,editUrl:"https://github.com/goto/firehose/edit/master/docs/docs/sinks/prometheus-sink.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"InfluxDB",permalink:"/firehose/sinks/influxdb-sink"},next:{title:"MongoDB",permalink:"/firehose/sinks/mongo-sink"}},s={},m=[{value:"<code>SINK_PROM_SERVICE_URL</code>",id:"sink_prom_service_url",level:3},{value:"<code>SINK_PROM_REQUEST_TIMEOUT_MS</code>",id:"sink_prom_request_timeout_ms",level:3},{value:"<code>SINK_PROM_MAX_CONNECTIONS</code>",id:"sink_prom_max_connections",level:3},{value:"<code>SINK_PROM_RETRY_STATUS_CODE_RANGES</code>",id:"sink_prom_retry_status_code_ranges",level:3},{value:"<code>SINK_PROM_REQUEST_LOG_STATUS_CODE_RANGES</code>",id:"sink_prom_request_log_status_code_ranges",level:3},{value:"<code>SINK_PROM_HEADERS</code>",id:"sink_prom_headers",level:3},{value:"<code>SINK_PROM_METRIC_NAME_PROTO_INDEX_MAPPING</code>",id:"sink_prom_metric_name_proto_index_mapping",level:3},{value:"<code>SINK_PROM_LABEL_NAME_PROTO_INDEX_MAPPING</code>",id:"sink_prom_label_name_proto_index_mapping",level:3},{value:"<code>SINK_PROM_WITH_EVENT_TIMESTAMP</code>",id:"sink_prom_with_event_timestamp",level:3},{value:"<code>SINK_PROM_PROTO_EVENT_TIMESTAMP_INDEX</code>",id:"sink_prom_proto_event_timestamp_index",level:3}],_={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,l.kt)("wrapper",(0,i.Z)({},_,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"prometheus"},"Prometheus"),(0,l.kt)("p",null,"A Prometheus sink Firehose ","(",(0,l.kt)("inlineCode",{parentName:"p"},"SINK_TYPE"),"=",(0,l.kt)("inlineCode",{parentName:"p"},"prometheus"),")"," requires the following variables to be set along with Generic ones."),(0,l.kt)("h3",{id:"sink_prom_service_url"},(0,l.kt)("inlineCode",{parentName:"h3"},"SINK_PROM_SERVICE_URL")),(0,l.kt)("p",null,"Defines the HTTP/Cortex endpoint of the service to which this consumer should POST data."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example value: ",(0,l.kt)("inlineCode",{parentName:"li"},"http://localhost:9009/api/prom/push")),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"required"))),(0,l.kt)("h3",{id:"sink_prom_request_timeout_ms"},(0,l.kt)("inlineCode",{parentName:"h3"},"SINK_PROM_REQUEST_TIMEOUT_MS")),(0,l.kt)("p",null,"Defines the connection timeout for the request in millis."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example value: ",(0,l.kt)("inlineCode",{parentName:"li"},"10000")),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"required")),(0,l.kt)("li",{parentName:"ul"},"Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"10000"))),(0,l.kt)("h3",{id:"sink_prom_max_connections"},(0,l.kt)("inlineCode",{parentName:"h3"},"SINK_PROM_MAX_CONNECTIONS")),(0,l.kt)("p",null,"Defines the maximum number of HTTP connections with Prometheus."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example value: ",(0,l.kt)("inlineCode",{parentName:"li"},"10")),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"optional")),(0,l.kt)("li",{parentName:"ul"},"Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"default no more than 2 concurrent connections per given route and no more 20 connections"))),(0,l.kt)("h3",{id:"sink_prom_retry_status_code_ranges"},(0,l.kt)("inlineCode",{parentName:"h3"},"SINK_PROM_RETRY_STATUS_CODE_RANGES")),(0,l.kt)("p",null,"Defines the range of HTTP status codes for which retry will be attempted."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example value: ",(0,l.kt)("inlineCode",{parentName:"li"},"400-600")),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"optional")),(0,l.kt)("li",{parentName:"ul"},"Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"400-600"))),(0,l.kt)("h3",{id:"sink_prom_request_log_status_code_ranges"},(0,l.kt)("inlineCode",{parentName:"h3"},"SINK_PROM_REQUEST_LOG_STATUS_CODE_RANGES")),(0,l.kt)("p",null,"Defines the range of HTTP status codes for which the request will be logged."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example value: ",(0,l.kt)("inlineCode",{parentName:"li"},"400-499")),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"optional")),(0,l.kt)("li",{parentName:"ul"},"Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"400-499"))),(0,l.kt)("h3",{id:"sink_prom_headers"},(0,l.kt)("inlineCode",{parentName:"h3"},"SINK_PROM_HEADERS")),(0,l.kt)("p",null,"Defines the HTTP headers required to push the data to the above URL."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example value: ",(0,l.kt)("inlineCode",{parentName:"li"},"Authorization:auth_token, Accept:text/plain")),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"optional"))),(0,l.kt)("h3",{id:"sink_prom_metric_name_proto_index_mapping"},(0,l.kt)("inlineCode",{parentName:"h3"},"SINK_PROM_METRIC_NAME_PROTO_INDEX_MAPPING")),(0,l.kt)("p",null,"The mapping of fields and the corresponding proto index which will be set as the metric name on Cortex. This is a JSON field."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example value: ",(0,l.kt)("inlineCode",{parentName:"li"},'{"2":"tip_amount","1":"feedback_ratings"}'),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Proto field value with index 2 will be stored as metric named ",(0,l.kt)("inlineCode",{parentName:"li"},"tip_amount")," in Cortex and so on"))),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"required"))),(0,l.kt)("h3",{id:"sink_prom_label_name_proto_index_mapping"},(0,l.kt)("inlineCode",{parentName:"h3"},"SINK_PROM_LABEL_NAME_PROTO_INDEX_MAPPING")),(0,l.kt)("p",null,"The mapping of proto fields to metric lables. This is a JSON field. Each metric defined in ",(0,l.kt)("inlineCode",{parentName:"p"},"SINK_PROM_METRIC_NAME_PROTO_INDEX_MAPPING")," will have all the labels defined here."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example value: ",(0,l.kt)("inlineCode",{parentName:"li"},'{"6":"customer_id"}')),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"optional"))),(0,l.kt)("h3",{id:"sink_prom_with_event_timestamp"},(0,l.kt)("inlineCode",{parentName:"h3"},"SINK_PROM_WITH_EVENT_TIMESTAMP")),(0,l.kt)("p",null,"If set to true, metric timestamp will using event timestamp otherwise it will using timestamp when Firehose push to endpoint."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example value: ",(0,l.kt)("inlineCode",{parentName:"li"},"false")),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"optional")),(0,l.kt)("li",{parentName:"ul"},"Default value: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"))),(0,l.kt)("h3",{id:"sink_prom_proto_event_timestamp_index"},(0,l.kt)("inlineCode",{parentName:"h3"},"SINK_PROM_PROTO_EVENT_TIMESTAMP_INDEX")),(0,l.kt)("p",null,"Defines the proto index of a field that can be used as the timestamp."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example value: ",(0,l.kt)("inlineCode",{parentName:"li"},"2")),(0,l.kt)("li",{parentName:"ul"},"Type: ",(0,l.kt)("inlineCode",{parentName:"li"},"required (if SINK_PROM_WITH_EVENT_TIMESTAMP=true)"))))}d.isMDXComponent=!0}}]);